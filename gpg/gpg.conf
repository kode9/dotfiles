# If you have more than 1 secret key in your keyring, you may want to
# uncomment the following option and set your preferred keyid.
#
default-key 0xBB3504574B74E1B9

# If no recipient specifient, use my own key
#
default-recipient-self

################################################################################

# Digest to use when signing a key
#
cert-digest-algo SHA512

# Symmetryc encryption ciphers
#
personal-cipher-preferences TWOFISH CAMELLIA256 AES256 CAMELLIA192 AES192 AES CAMELLIA128

# Signing digests
#
personal-digest-preferences SHA512 SHA384 SHA256

# Compression algorithms
#
personal-compress-preferences ZLIB BZIP2 ZIP Uncompressed

# default preferences for setpref
#
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES ZLIB BZIP2 ZIP

################################################################################

# Get rid of the copyright notice
#
no-greeting

# Don't show version
#
no-emit-version

## Don't add additional comments
#
no-comments

# Because some mailers change lines starting with "From " to ">From "
# it is good to handle such lines in a special way when creating
# cleartext signatures; all other PGP versions do it this way too.
# To enable full OpenPGP compliance you may want to use this option.
#
no-escape-from-lines

# When verifying a signature made from a subkey, ensure that the cross
# certification "back signature" on the subkey is present and valid.
# This protects against a subtle attack against subkeys that can sign.
# Defaults to --no-require-cross-certification.  However for new
# installations it should be enabled.
#
require-cross-certification

# Set the name of the native character set.
#
display-charset utf-8

# Some old Windows platforms require 8.3 filenames.  If your system
# can handle long filenames, uncomment this.
#
no-mangle-dos-filenames

# Do not merge primary user ID and primary key
#
fixed-list-mode

# Use 16 character key IDs
#
keyid-format 0xlong

# Options when listing keys and signatures
#
list-options show-uid-validity show-usage show-sig-expire

# Options when verifying signatures
#
verify-options show-uid-validity show-photos

# default to armored ASCII output
#
armor

# Common options for keyserver functions.
#
# include-revoked: When searching for a key with --search-keys, include keys
# that are marked on the keyserver as revoked.Note that not all keyservers
# differentiate between revoked and unrevoked keys, and for such keyservers
# this option is meaningless. Note also that most keyservers do not have
# cryptographic verification of key revocations, and so turning this option
# off may result in skipping keys that are incorrectly marked as revoked.
#
# include-disabled: When searching for a key with --search-keys, include keys
# that are marked on the keyserver as disabled. Note that this option is not
# used with HKP keyservers.
#
# honor-keyserver-url: When using --refresh-keys, if the key in question has a
# preferred keyserver URL, then use that preferred keyserver to refresh the key
# from. In addition, if auto-key-retrieve is set, and the signature being
# verified has a preferred keyserver URL, then use that preferred keyserver to
# fetch the key from. Note that this option introduces a "web bug": The creator
# of the key can see when the keys is refreshed. Thus this option is not enabled
# by default.
#
# honor-pka-record: If --auto-key-retrieve is used, and the signature being
# verified has a PKA record, then use the PKA information to fetch the
# key. Defaults to "yes".
#
# include-subkeys: When receiving a key, include subkeys as potential
# targets. Note that this option is not used with HKP keyservers, as they do not
# support retrieving keys by subkey id.
#
# timeout: Tell the keyserver helper program how long (in seconds) to try and
# perform a keyserver action before giving up. Note that performing multiple
# actions at the same time uses this timeout value per action. For example, when
# retrieving multiple keys via --receive-keys, the timeout applies separately to
# each key retrieval, and not to the --receive-keys command as a whole. Defaults
# to 30 seconds.
#
keyserver-options auto-key-retrieve no-include-attributes no-honor-keyserver-url

# Use this program to display photo user IDs
#
# %i is expanded to a temporary file that contains the photo.
# %I is the same as %i, but the file isn't deleted afterwards by GnuPG.
# %k is expanded to the key ID of the key.
# %K is expanded to the long OpenPGP key ID of the key.
# %t is expanded to the extension of the image (e.g. "jpg").
# %T is expanded to the MIME type of the image (e.g. "image/jpeg").
# %f is expanded to the fingerprint of the key.
# %% is %, of course.
#
# If %i or %I are not present, then the photo is supplied to the
# viewer on standard input.  If your platform supports it, standard
# input is the best way to do this as it avoids the time and effort in
# generating and then cleaning up a secure temp file.
#
# The default program is "xloadimage -fork -quiet -title 'KeyID 0x%k' stdin"
# On Mac OS X and Windows, the default is to use your regular JPEG image
# viewer.
#
# Some other viewers:
# photo-viewer "qiv %i"
# photo-viewer "ee %i"
# photo-viewer "display -title 'KeyID 0x%k'"
#
# This one saves a copy of the photo ID in your home directory:
# photo-viewer "cat > ~/photoid-for-key-%k.%t"
#
# Use your MIME handler to view photos:
# photo-viewer "metamail -q -d -b -c %T -s 'KeyID 0x%k' -f GnuPG"
#
photo-viewer "xdg-open %I"
